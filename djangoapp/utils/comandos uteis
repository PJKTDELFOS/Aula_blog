docker-compose up -d subir  oculto
docker-compose up --build subir alterações
docker-compose up --build --remove-orphans --renew-anon-volumes --force-recreate
docker-compose up começar o container
docker-compose run --rm djangoapp python manage.py check
docker-compose run --rm djangoapp python manage.py runserver   iniciar o servidro
(primeiro faça o compose up - d e depois mande o runserver
docker-compose run --rm djangoapp python manage.py makemigrations fazer migraçoes
docker-compose run --rm djangoapp python manage.py migrate aplicar migraçoes
docker-compose run --rm djangoapp python manage.py createsuperuser criar super usuario
docker-compose run --rm djangoapp python manage.py startapp Blog12  criar o app blog
docker-compose run --rm djangoapp python manage.py collectstatic
docker-compose run --rm djangoapp python manage.py runserve
1-abrir docker
2-iniciar os container
3-iniciar o locar server

super-user:adminalbert
senha 15Al#1992a

abrir pelo django app

o docker esta vendo a pasta utils, ,  e esta funcionando

https://github.com/lqez/django-summernote?tab=readme-ov-file passo a passo do summernote

abrir pelo django-app
{% include "blog/partials/_temp.html" %}

<li class="menu-item">
            <a class="menu-link" href="/page/">Page</a>
          </li>
          <li class="menu-item">
            <a class="menu-link" href="#">About us</a>
          </li>
          <li class="menu-item">
            <a class="menu-link" href="#">Contact</a>
          </li>
          <li class="menu-item">
            <a class="menu-link" href="#">Support</a>
          </li>

 # def index(request):
#     posts=Post.objects.get_published()
#     paginator = Paginator(posts, itens_por_pagina)
#     page_number = request.GET.get("page")
#     page_obj = paginator.get_page(page_number)
#
#
#     return render(
#         request,
#         'blog/pages/index.html',
#         {
#             'page_obj': page_obj,
#             'page_title': 'Home - ',
#         }
#     )
#
def created_by(request,author_pk):

    user=User.objects.filter(pk=author_pk).first()
    if user is None:
        raise Http404()
    user_full_name=user.username
    if user.first_name :
        user_full_name=user.first_name+' '+user.last_name
    page_title=user_full_name +  ' posts-'
    posts=Post.objects.get_published().filter(created_by__pk=author_pk)
    paginator = Paginator(posts, itens_por_pagina)
    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)

    return render(
        request,
        'blog/pages/index.html',
        {
            'page_obj': page_obj,
            'page_title': page_title,
        }
    )
def categories(request,slug):
    posts=Post.objects.get_published().filter(categories__slug=slug)

    if len(posts)==0:
        raise Http404()


    paginator = Paginator(posts, itens_por_pagina)
    page_number = request.GET.get("page")
    page_obj = paginator.get_page(page_number)
    page_title=f' {page_obj[0].categories.name}- '

    return render(
        request,
        'blog/pages/index.html',
        {
            'page_obj': page_obj,
            'page_title': page_title,
        }
    )
